apiVersion: apps/v1
kind: Deployment
metadata:
  name: golang-api
  namespace: golang-app
  labels:
    app: golang-api
    version: v1
spec:
  replicas: 2
  selector:
    matchLabels:
      app: golang-api
  template:
    metadata:
      labels:
        app: golang-api
        version: v1
    spec:
      containers:
      - name: golang-api
        image: ghcr.io/psyunix/golang-api:latest
        imagePullPolicy: Always
        ports:
        - containerPort: 8080
          name: http
          protocol: TCP
        env:
        - name: PORT
          value: "8080"
        - name: LOG_LEVEL
          value: "info"
        resources:
          requests:
            memory: "128Mi"
            cpu: "100m"
          limits:
            memory: "256Mi"
            cpu: "200m"
        livenessProbe:
          httpGet:
            path: /health
            port: 8080
          initialDelaySeconds: 10
          periodSeconds: 30
          timeoutSeconds: 5
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /health
            port: 8080
          initialDelaySeconds: 5
          periodSeconds: 10
          timeoutSeconds: 3
          failureThreshold: 3
      restartPolicy: Always
---
apiVersion: v1
kind: Service
metadata:
  name: golang-api-service
  namespace: golang-app
  labels:
    app: golang-api
spec:
  type: NodePort
  selector:
    app: golang-api
  ports:
  - port: 8080
    targetPort: 8080
    nodePort: 30080
    protocol: TCP
    name: http
---
apiVersion: v1
kind: Service
metadata:
  name: golang-api-loadbalancer
  namespace: golang-app
  labels:
    app: golang-api
spec:
  type: LoadBalancer
  selector:
    app: golang-api
  ports:
  - port: 80
    targetPort: 8080
    protocol: TCP
    name: http
